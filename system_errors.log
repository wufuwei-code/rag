{"timestamp": "2025-08-17T10:18:47.602531", "query": "What is the population of the United States", "error_type": "NameError", "error_message": "name 'UniversalParser' is not defined", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\n  File \"/home/wufuwei/rag/universal_rag_engine.py\", line 83, in generate_answer\n    confidence = self.calculate_confidence(query, answer_candidate, documents[0][\"similarity\"])\n  File \"/home/wufuwei/rag/universal_rag_engine.py\", line 104, in calculate_confidence\n    keywords = set(UniversalParser().parse(query)[\"keywords\"])\nNameError: name 'UniversalParser' is not defined\n"}
2025-08-17 10:18:47,602 - ERROR - {"timestamp": "2025-08-17T10:18:47.602531", "query": "What is the population of the United States", "error_type": "NameError", "error_message": "name 'UniversalParser' is not defined", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\n  File \"/home/wufuwei/rag/universal_rag_engine.py\", line 83, in generate_answer\n    confidence = self.calculate_confidence(query, answer_candidate, documents[0][\"similarity\"])\n  File \"/home/wufuwei/rag/universal_rag_engine.py\", line 104, in calculate_confidence\n    keywords = set(UniversalParser().parse(query)[\"keywords\"])\nNameError: name 'UniversalParser' is not defined\n"}
{"timestamp": "2025-08-17T10:19:15.491931", "query": "How many states are there in the United States", "error_type": "NameError", "error_message": "name 'UniversalParser' is not defined", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\n  File \"/home/wufuwei/rag/universal_rag_engine.py\", line 83, in generate_answer\n    confidence = self.calculate_confidence(query, answer_candidate, documents[0][\"similarity\"])\n  File \"/home/wufuwei/rag/universal_rag_engine.py\", line 104, in calculate_confidence\n    keywords = set(UniversalParser().parse(query)[\"keywords\"])\nNameError: name 'UniversalParser' is not defined\n"}
2025-08-17 10:19:15,492 - ERROR - {"timestamp": "2025-08-17T10:19:15.491931", "query": "How many states are there in the United States", "error_type": "NameError", "error_message": "name 'UniversalParser' is not defined", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\n  File \"/home/wufuwei/rag/universal_rag_engine.py\", line 83, in generate_answer\n    confidence = self.calculate_confidence(query, answer_candidate, documents[0][\"similarity\"])\n  File \"/home/wufuwei/rag/universal_rag_engine.py\", line 104, in calculate_confidence\n    keywords = set(UniversalParser().parse(query)[\"keywords\"])\nNameError: name 'UniversalParser' is not defined\n"}
{"timestamp": "2025-08-17T10:19:36.658536", "query": "", "error_type": "NameError", "error_message": "name 'UniversalParser' is not defined", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\n  File \"/home/wufuwei/rag/universal_rag_engine.py\", line 83, in generate_answer\n    confidence = self.calculate_confidence(query, answer_candidate, documents[0][\"similarity\"])\n  File \"/home/wufuwei/rag/universal_rag_engine.py\", line 104, in calculate_confidence\n    keywords = set(UniversalParser().parse(query)[\"keywords\"])\nNameError: name 'UniversalParser' is not defined\n"}
2025-08-17 10:19:36,658 - ERROR - {"timestamp": "2025-08-17T10:19:36.658536", "query": "", "error_type": "NameError", "error_message": "name 'UniversalParser' is not defined", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\n  File \"/home/wufuwei/rag/universal_rag_engine.py\", line 83, in generate_answer\n    confidence = self.calculate_confidence(query, answer_candidate, documents[0][\"similarity\"])\n  File \"/home/wufuwei/rag/universal_rag_engine.py\", line 104, in calculate_confidence\n    keywords = set(UniversalParser().parse(query)[\"keywords\"])\nNameError: name 'UniversalParser' is not defined\n"}
{"timestamp": "2025-08-17T10:19:36.869705", "query": "", "error_type": "NameError", "error_message": "name 'UniversalParser' is not defined", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\n  File \"/home/wufuwei/rag/universal_rag_engine.py\", line 83, in generate_answer\n    confidence = self.calculate_confidence(query, answer_candidate, documents[0][\"similarity\"])\n  File \"/home/wufuwei/rag/universal_rag_engine.py\", line 104, in calculate_confidence\n    keywords = set(UniversalParser().parse(query)[\"keywords\"])\nNameError: name 'UniversalParser' is not defined\n"}
2025-08-17 10:19:36,869 - ERROR - {"timestamp": "2025-08-17T10:19:36.869705", "query": "", "error_type": "NameError", "error_message": "name 'UniversalParser' is not defined", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\n  File \"/home/wufuwei/rag/universal_rag_engine.py\", line 83, in generate_answer\n    confidence = self.calculate_confidence(query, answer_candidate, documents[0][\"similarity\"])\n  File \"/home/wufuwei/rag/universal_rag_engine.py\", line 104, in calculate_confidence\n    keywords = set(UniversalParser().parse(query)[\"keywords\"])\nNameError: name 'UniversalParser' is not defined\n"}
{"timestamp": "2025-08-17T10:19:37.075754", "query": "", "error_type": "NameError", "error_message": "name 'UniversalParser' is not defined", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\n  File \"/home/wufuwei/rag/universal_rag_engine.py\", line 83, in generate_answer\n    confidence = self.calculate_confidence(query, answer_candidate, documents[0][\"similarity\"])\n  File \"/home/wufuwei/rag/universal_rag_engine.py\", line 104, in calculate_confidence\n    keywords = set(UniversalParser().parse(query)[\"keywords\"])\nNameError: name 'UniversalParser' is not defined\n"}
2025-08-17 10:19:37,075 - ERROR - {"timestamp": "2025-08-17T10:19:37.075754", "query": "", "error_type": "NameError", "error_message": "name 'UniversalParser' is not defined", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\n  File \"/home/wufuwei/rag/universal_rag_engine.py\", line 83, in generate_answer\n    confidence = self.calculate_confidence(query, answer_candidate, documents[0][\"similarity\"])\n  File \"/home/wufuwei/rag/universal_rag_engine.py\", line 104, in calculate_confidence\n    keywords = set(UniversalParser().parse(query)[\"keywords\"])\nNameError: name 'UniversalParser' is not defined\n"}
{"timestamp": "2025-08-17T10:19:37.279795", "query": "", "error_type": "NameError", "error_message": "name 'UniversalParser' is not defined", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\n  File \"/home/wufuwei/rag/universal_rag_engine.py\", line 83, in generate_answer\n    confidence = self.calculate_confidence(query, answer_candidate, documents[0][\"similarity\"])\n  File \"/home/wufuwei/rag/universal_rag_engine.py\", line 104, in calculate_confidence\n    keywords = set(UniversalParser().parse(query)[\"keywords\"])\nNameError: name 'UniversalParser' is not defined\n"}
2025-08-17 10:19:37,279 - ERROR - {"timestamp": "2025-08-17T10:19:37.279795", "query": "", "error_type": "NameError", "error_message": "name 'UniversalParser' is not defined", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\n  File \"/home/wufuwei/rag/universal_rag_engine.py\", line 83, in generate_answer\n    confidence = self.calculate_confidence(query, answer_candidate, documents[0][\"similarity\"])\n  File \"/home/wufuwei/rag/universal_rag_engine.py\", line 104, in calculate_confidence\n    keywords = set(UniversalParser().parse(query)[\"keywords\"])\nNameError: name 'UniversalParser' is not defined\n"}
{"timestamp": "2025-08-17T10:19:37.484336", "query": "", "error_type": "NameError", "error_message": "name 'UniversalParser' is not defined", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\n  File \"/home/wufuwei/rag/universal_rag_engine.py\", line 83, in generate_answer\n    confidence = self.calculate_confidence(query, answer_candidate, documents[0][\"similarity\"])\n  File \"/home/wufuwei/rag/universal_rag_engine.py\", line 104, in calculate_confidence\n    keywords = set(UniversalParser().parse(query)[\"keywords\"])\nNameError: name 'UniversalParser' is not defined\n"}
2025-08-17 10:19:37,484 - ERROR - {"timestamp": "2025-08-17T10:19:37.484336", "query": "", "error_type": "NameError", "error_message": "name 'UniversalParser' is not defined", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\n  File \"/home/wufuwei/rag/universal_rag_engine.py\", line 83, in generate_answer\n    confidence = self.calculate_confidence(query, answer_candidate, documents[0][\"similarity\"])\n  File \"/home/wufuwei/rag/universal_rag_engine.py\", line 104, in calculate_confidence\n    keywords = set(UniversalParser().parse(query)[\"keywords\"])\nNameError: name 'UniversalParser' is not defined\n"}
{"timestamp": "2025-08-17T10:19:37.688548", "query": "", "error_type": "NameError", "error_message": "name 'UniversalParser' is not defined", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\n  File \"/home/wufuwei/rag/universal_rag_engine.py\", line 83, in generate_answer\n    confidence = self.calculate_confidence(query, answer_candidate, documents[0][\"similarity\"])\n  File \"/home/wufuwei/rag/universal_rag_engine.py\", line 104, in calculate_confidence\n    keywords = set(UniversalParser().parse(query)[\"keywords\"])\nNameError: name 'UniversalParser' is not defined\n"}
2025-08-17 10:19:37,688 - ERROR - {"timestamp": "2025-08-17T10:19:37.688548", "query": "", "error_type": "NameError", "error_message": "name 'UniversalParser' is not defined", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\n  File \"/home/wufuwei/rag/universal_rag_engine.py\", line 83, in generate_answer\n    confidence = self.calculate_confidence(query, answer_candidate, documents[0][\"similarity\"])\n  File \"/home/wufuwei/rag/universal_rag_engine.py\", line 104, in calculate_confidence\n    keywords = set(UniversalParser().parse(query)[\"keywords\"])\nNameError: name 'UniversalParser' is not defined\n"}
{"timestamp": "2025-08-17T10:19:37.896940", "query": "参考知识", "error_type": "NameError", "error_message": "name 'UniversalParser' is not defined", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\n  File \"/home/wufuwei/rag/universal_rag_engine.py\", line 83, in generate_answer\n    confidence = self.calculate_confidence(query, answer_candidate, documents[0][\"similarity\"])\n  File \"/home/wufuwei/rag/universal_rag_engine.py\", line 104, in calculate_confidence\n    keywords = set(UniversalParser().parse(query)[\"keywords\"])\nNameError: name 'UniversalParser' is not defined\n"}
2025-08-17 10:19:37,897 - ERROR - {"timestamp": "2025-08-17T10:19:37.896940", "query": "参考知识", "error_type": "NameError", "error_message": "name 'UniversalParser' is not defined", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\n  File \"/home/wufuwei/rag/universal_rag_engine.py\", line 83, in generate_answer\n    confidence = self.calculate_confidence(query, answer_candidate, documents[0][\"similarity\"])\n  File \"/home/wufuwei/rag/universal_rag_engine.py\", line 104, in calculate_confidence\n    keywords = set(UniversalParser().parse(query)[\"keywords\"])\nNameError: name 'UniversalParser' is not defined\n"}
{"timestamp": "2025-08-17T10:19:38.111765", "query": "个性指令", "error_type": "NameError", "error_message": "name 'UniversalParser' is not defined", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\n  File \"/home/wufuwei/rag/universal_rag_engine.py\", line 83, in generate_answer\n    confidence = self.calculate_confidence(query, answer_candidate, documents[0][\"similarity\"])\n  File \"/home/wufuwei/rag/universal_rag_engine.py\", line 104, in calculate_confidence\n    keywords = set(UniversalParser().parse(query)[\"keywords\"])\nNameError: name 'UniversalParser' is not defined\n"}
2025-08-17 10:19:38,111 - ERROR - {"timestamp": "2025-08-17T10:19:38.111765", "query": "个性指令", "error_type": "NameError", "error_message": "name 'UniversalParser' is not defined", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\n  File \"/home/wufuwei/rag/universal_rag_engine.py\", line 83, in generate_answer\n    confidence = self.calculate_confidence(query, answer_candidate, documents[0][\"similarity\"])\n  File \"/home/wufuwei/rag/universal_rag_engine.py\", line 104, in calculate_confidence\n    keywords = set(UniversalParser().parse(query)[\"keywords\"])\nNameError: name 'UniversalParser' is not defined\n"}
{"timestamp": "2025-08-17T10:19:38.322480", "query": "深度思考", "error_type": "NameError", "error_message": "name 'UniversalParser' is not defined", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\n  File \"/home/wufuwei/rag/universal_rag_engine.py\", line 83, in generate_answer\n    confidence = self.calculate_confidence(query, answer_candidate, documents[0][\"similarity\"])\n  File \"/home/wufuwei/rag/universal_rag_engine.py\", line 104, in calculate_confidence\n    keywords = set(UniversalParser().parse(query)[\"keywords\"])\nNameError: name 'UniversalParser' is not defined\n"}
2025-08-17 10:19:38,322 - ERROR - {"timestamp": "2025-08-17T10:19:38.322480", "query": "深度思考", "error_type": "NameError", "error_message": "name 'UniversalParser' is not defined", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\n  File \"/home/wufuwei/rag/universal_rag_engine.py\", line 83, in generate_answer\n    confidence = self.calculate_confidence(query, answer_candidate, documents[0][\"similarity\"])\n  File \"/home/wufuwei/rag/universal_rag_engine.py\", line 104, in calculate_confidence\n    keywords = set(UniversalParser().parse(query)[\"keywords\"])\nNameError: name 'UniversalParser' is not defined\n"}
{"timestamp": "2025-08-17T10:19:38.532381", "query": "10/5000", "error_type": "NameError", "error_message": "name 'UniversalParser' is not defined", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\n  File \"/home/wufuwei/rag/universal_rag_engine.py\", line 83, in generate_answer\n    confidence = self.calculate_confidence(query, answer_candidate, documents[0][\"similarity\"])\n  File \"/home/wufuwei/rag/universal_rag_engine.py\", line 104, in calculate_confidence\n    keywords = set(UniversalParser().parse(query)[\"keywords\"])\nNameError: name 'UniversalParser' is not defined\n"}
2025-08-17 10:19:38,532 - ERROR - {"timestamp": "2025-08-17T10:19:38.532381", "query": "10/5000", "error_type": "NameError", "error_message": "name 'UniversalParser' is not defined", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\n  File \"/home/wufuwei/rag/universal_rag_engine.py\", line 83, in generate_answer\n    confidence = self.calculate_confidence(query, answer_candidate, documents[0][\"similarity\"])\n  File \"/home/wufuwei/rag/universal_rag_engine.py\", line 104, in calculate_confidence\n    keywords = set(UniversalParser().parse(query)[\"keywords\"])\nNameError: name 'UniversalParser' is not defined\n"}
{"timestamp": "2025-08-17T10:27:45.583840", "query": "参考知识", "error_type": "NameError", "error_message": "name 'UniversalParser' is not defined", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\n  File \"/home/wufuwei/rag/universal_rag_engine.py\", line 83, in generate_answer\n    confidence = self.calculate_confidence(query, answer_candidate, documents[0][\"similarity\"])\n  File \"/home/wufuwei/rag/universal_rag_engine.py\", line 104, in calculate_confidence\n    keywords = set(UniversalParser().parse(query)[\"keywords\"])\nNameError: name 'UniversalParser' is not defined\n"}
2025-08-17 10:27:45,584 - ERROR - {"timestamp": "2025-08-17T10:27:45.583840", "query": "参考知识", "error_type": "NameError", "error_message": "name 'UniversalParser' is not defined", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\n  File \"/home/wufuwei/rag/universal_rag_engine.py\", line 83, in generate_answer\n    confidence = self.calculate_confidence(query, answer_candidate, documents[0][\"similarity\"])\n  File \"/home/wufuwei/rag/universal_rag_engine.py\", line 104, in calculate_confidence\n    keywords = set(UniversalParser().parse(query)[\"keywords\"])\nNameError: name 'UniversalParser' is not defined\n"}
{"timestamp": "2025-08-17T10:27:45.795830", "query": "个性指令", "error_type": "NameError", "error_message": "name 'UniversalParser' is not defined", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\n  File \"/home/wufuwei/rag/universal_rag_engine.py\", line 83, in generate_answer\n    confidence = self.calculate_confidence(query, answer_candidate, documents[0][\"similarity\"])\n  File \"/home/wufuwei/rag/universal_rag_engine.py\", line 104, in calculate_confidence\n    keywords = set(UniversalParser().parse(query)[\"keywords\"])\nNameError: name 'UniversalParser' is not defined\n"}
2025-08-17 10:27:45,795 - ERROR - {"timestamp": "2025-08-17T10:27:45.795830", "query": "个性指令", "error_type": "NameError", "error_message": "name 'UniversalParser' is not defined", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\n  File \"/home/wufuwei/rag/universal_rag_engine.py\", line 83, in generate_answer\n    confidence = self.calculate_confidence(query, answer_candidate, documents[0][\"similarity\"])\n  File \"/home/wufuwei/rag/universal_rag_engine.py\", line 104, in calculate_confidence\n    keywords = set(UniversalParser().parse(query)[\"keywords\"])\nNameError: name 'UniversalParser' is not defined\n"}
{"timestamp": "2025-08-17T10:27:46.005386", "query": "深度思考", "error_type": "NameError", "error_message": "name 'UniversalParser' is not defined", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\n  File \"/home/wufuwei/rag/universal_rag_engine.py\", line 83, in generate_answer\n    confidence = self.calculate_confidence(query, answer_candidate, documents[0][\"similarity\"])\n  File \"/home/wufuwei/rag/universal_rag_engine.py\", line 104, in calculate_confidence\n    keywords = set(UniversalParser().parse(query)[\"keywords\"])\nNameError: name 'UniversalParser' is not defined\n"}
2025-08-17 10:27:46,005 - ERROR - {"timestamp": "2025-08-17T10:27:46.005386", "query": "深度思考", "error_type": "NameError", "error_message": "name 'UniversalParser' is not defined", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\n  File \"/home/wufuwei/rag/universal_rag_engine.py\", line 83, in generate_answer\n    confidence = self.calculate_confidence(query, answer_candidate, documents[0][\"similarity\"])\n  File \"/home/wufuwei/rag/universal_rag_engine.py\", line 104, in calculate_confidence\n    keywords = set(UniversalParser().parse(query)[\"keywords\"])\nNameError: name 'UniversalParser' is not defined\n"}
{"timestamp": "2025-08-17T10:27:46.212617", "query": "5/5000", "error_type": "NameError", "error_message": "name 'UniversalParser' is not defined", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\n  File \"/home/wufuwei/rag/universal_rag_engine.py\", line 83, in generate_answer\n    confidence = self.calculate_confidence(query, answer_candidate, documents[0][\"similarity\"])\n  File \"/home/wufuwei/rag/universal_rag_engine.py\", line 104, in calculate_confidence\n    keywords = set(UniversalParser().parse(query)[\"keywords\"])\nNameError: name 'UniversalParser' is not defined\n"}
2025-08-17 10:27:46,212 - ERROR - {"timestamp": "2025-08-17T10:27:46.212617", "query": "5/5000", "error_type": "NameError", "error_message": "name 'UniversalParser' is not defined", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\n  File \"/home/wufuwei/rag/universal_rag_engine.py\", line 83, in generate_answer\n    confidence = self.calculate_confidence(query, answer_candidate, documents[0][\"similarity\"])\n  File \"/home/wufuwei/rag/universal_rag_engine.py\", line 104, in calculate_confidence\n    keywords = set(UniversalParser().parse(query)[\"keywords\"])\nNameError: name 'UniversalParser' is not defined\n"}
{"timestamp": "2025-08-17T10:28:01.494864", "query": "How many states are there in the United StatesAmerica's Continents", "error_type": "NameError", "error_message": "name 'UniversalParser' is not defined", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\n  File \"/home/wufuwei/rag/universal_rag_engine.py\", line 83, in generate_answer\n    confidence = self.calculate_confidence(query, answer_candidate, documents[0][\"similarity\"])\n  File \"/home/wufuwei/rag/universal_rag_engine.py\", line 104, in calculate_confidence\n    keywords = set(UniversalParser().parse(query)[\"keywords\"])\nNameError: name 'UniversalParser' is not defined\n"}
2025-08-17 10:28:01,495 - ERROR - {"timestamp": "2025-08-17T10:28:01.494864", "query": "How many states are there in the United StatesAmerica's Continents", "error_type": "NameError", "error_message": "name 'UniversalParser' is not defined", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\n  File \"/home/wufuwei/rag/universal_rag_engine.py\", line 83, in generate_answer\n    confidence = self.calculate_confidence(query, answer_candidate, documents[0][\"similarity\"])\n  File \"/home/wufuwei/rag/universal_rag_engine.py\", line 104, in calculate_confidence\n    keywords = set(UniversalParser().parse(query)[\"keywords\"])\nNameError: name 'UniversalParser' is not defined\n"}
{"timestamp": "2025-08-17T10:30:16.180366", "query": "America's Continents", "error_type": "NameError", "error_message": "name 'UniversalParser' is not defined", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\n  File \"/home/wufuwei/rag/universal_rag_engine.py\", line 83, in generate_answer\n    confidence = self.calculate_confidence(query, answer_candidate, documents[0][\"similarity\"])\n  File \"/home/wufuwei/rag/universal_rag_engine.py\", line 104, in calculate_confidence\n    keywords = set(UniversalParser().parse(query)[\"keywords\"])\nNameError: name 'UniversalParser' is not defined\n"}
2025-08-17 10:30:16,180 - ERROR - {"timestamp": "2025-08-17T10:30:16.180366", "query": "America's Continents", "error_type": "NameError", "error_message": "name 'UniversalParser' is not defined", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\n  File \"/home/wufuwei/rag/universal_rag_engine.py\", line 83, in generate_answer\n    confidence = self.calculate_confidence(query, answer_candidate, documents[0][\"similarity\"])\n  File \"/home/wufuwei/rag/universal_rag_engine.py\", line 104, in calculate_confidence\n    keywords = set(UniversalParser().parse(query)[\"keywords\"])\nNameError: name 'UniversalParser' is not defined\n"}
{"timestamp": "2025-08-17T10:32:52.951551", "query": "import jieba", "error_type": "ValueError", "error_message": "too many values to unpack (expected 2)", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\nValueError: too many values to unpack (expected 2)\n"}
2025-08-17 10:32:52,951 - ERROR - {"timestamp": "2025-08-17T10:32:52.951551", "query": "import jieba", "error_type": "ValueError", "error_message": "too many values to unpack (expected 2)", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\nValueError: too many values to unpack (expected 2)\n"}
{"timestamp": "2025-08-17T10:32:52.978766", "query": "import jieba.posseg as pseg", "error_type": "ValueError", "error_message": "too many values to unpack (expected 2)", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\nValueError: too many values to unpack (expected 2)\n"}
2025-08-17 10:32:52,978 - ERROR - {"timestamp": "2025-08-17T10:32:52.978766", "query": "import jieba.posseg as pseg", "error_type": "ValueError", "error_message": "too many values to unpack (expected 2)", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\nValueError: too many values to unpack (expected 2)\n"}
{"timestamp": "2025-08-17T10:32:53.005567", "query": "from config import Config", "error_type": "ValueError", "error_message": "too many values to unpack (expected 2)", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\nValueError: too many values to unpack (expected 2)\n"}
2025-08-17 10:32:53,005 - ERROR - {"timestamp": "2025-08-17T10:32:53.005567", "query": "from config import Config", "error_type": "ValueError", "error_message": "too many values to unpack (expected 2)", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\nValueError: too many values to unpack (expected 2)\n"}
{"timestamp": "2025-08-17T10:32:53.032309", "query": "", "error_type": "ValueError", "error_message": "too many values to unpack (expected 2)", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\nValueError: too many values to unpack (expected 2)\n"}
2025-08-17 10:32:53,032 - ERROR - {"timestamp": "2025-08-17T10:32:53.032309", "query": "", "error_type": "ValueError", "error_message": "too many values to unpack (expected 2)", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\nValueError: too many values to unpack (expected 2)\n"}
{"timestamp": "2025-08-17T10:32:53.059087", "query": "class UniversalDialogueTracker:", "error_type": "ValueError", "error_message": "too many values to unpack (expected 2)", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\nValueError: too many values to unpack (expected 2)\n"}
2025-08-17 10:32:53,059 - ERROR - {"timestamp": "2025-08-17T10:32:53.059087", "query": "class UniversalDialogueTracker:", "error_type": "ValueError", "error_message": "too many values to unpack (expected 2)", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\nValueError: too many values to unpack (expected 2)\n"}
{"timestamp": "2025-08-17T10:32:53.085987", "query": "    def __init__(self):", "error_type": "ValueError", "error_message": "too many values to unpack (expected 2)", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\nValueError: too many values to unpack (expected 2)\n"}
2025-08-17 10:32:53,086 - ERROR - {"timestamp": "2025-08-17T10:32:53.085987", "query": "    def __init__(self):", "error_type": "ValueError", "error_message": "too many values to unpack (expected 2)", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\nValueError: too many values to unpack (expected 2)\n"}
{"timestamp": "2025-08-17T10:32:53.112440", "query": "        self.history = []", "error_type": "ValueError", "error_message": "too many values to unpack (expected 2)", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\nValueError: too many values to unpack (expected 2)\n"}
2025-08-17 10:32:53,112 - ERROR - {"timestamp": "2025-08-17T10:32:53.112440", "query": "        self.history = []", "error_type": "ValueError", "error_message": "too many values to unpack (expected 2)", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\nValueError: too many values to unpack (expected 2)\n"}
{"timestamp": "2025-08-17T10:32:53.139350", "query": "        # 加载领域词典", "error_type": "ValueError", "error_message": "too many values to unpack (expected 2)", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\nValueError: too many values to unpack (expected 2)\n"}
2025-08-17 10:32:53,139 - ERROR - {"timestamp": "2025-08-17T10:32:53.139350", "query": "        # 加载领域词典", "error_type": "ValueError", "error_message": "too many values to unpack (expected 2)", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\nValueError: too many values to unpack (expected 2)\n"}
{"timestamp": "2025-08-17T10:32:53.165877", "query": "        try:", "error_type": "ValueError", "error_message": "too many values to unpack (expected 2)", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\nValueError: too many values to unpack (expected 2)\n"}
2025-08-17 10:32:53,166 - ERROR - {"timestamp": "2025-08-17T10:32:53.165877", "query": "        try:", "error_type": "ValueError", "error_message": "too many values to unpack (expected 2)", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\nValueError: too many values to unpack (expected 2)\n"}
{"timestamp": "2025-08-17T10:32:53.192936", "query": "            jieba.load_userdict(Config.DOMAIN_DICT_PATH)", "error_type": "ValueError", "error_message": "too many values to unpack (expected 2)", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\nValueError: too many values to unpack (expected 2)\n"}
2025-08-17 10:32:53,193 - ERROR - {"timestamp": "2025-08-17T10:32:53.192936", "query": "            jieba.load_userdict(Config.DOMAIN_DICT_PATH)", "error_type": "ValueError", "error_message": "too many values to unpack (expected 2)", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\nValueError: too many values to unpack (expected 2)\n"}
{"timestamp": "2025-08-17T10:32:53.220086", "query": "        except FileNotFoundError:", "error_type": "ValueError", "error_message": "too many values to unpack (expected 2)", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\nValueError: too many values to unpack (expected 2)\n"}
2025-08-17 10:32:53,220 - ERROR - {"timestamp": "2025-08-17T10:32:53.220086", "query": "        except FileNotFoundError:", "error_type": "ValueError", "error_message": "too many values to unpack (expected 2)", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\nValueError: too many values to unpack (expected 2)\n"}
{"timestamp": "2025-08-17T10:32:53.248011", "query": "            print(f\"警告: 领域词典文件 {Config.DOMAIN_DICT_PATH} 不存在，将使用默认分词\")", "error_type": "ValueError", "error_message": "too many values to unpack (expected 2)", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\nValueError: too many values to unpack (expected 2)\n"}
2025-08-17 10:32:53,248 - ERROR - {"timestamp": "2025-08-17T10:32:53.248011", "query": "            print(f\"警告: 领域词典文件 {Config.DOMAIN_DICT_PATH} 不存在，将使用默认分词\")", "error_type": "ValueError", "error_message": "too many values to unpack (expected 2)", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\nValueError: too many values to unpack (expected 2)\n"}
{"timestamp": "2025-08-17T10:32:53.275039", "query": "    ", "error_type": "ValueError", "error_message": "too many values to unpack (expected 2)", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\nValueError: too many values to unpack (expected 2)\n"}
2025-08-17 10:32:53,275 - ERROR - {"timestamp": "2025-08-17T10:32:53.275039", "query": "    ", "error_type": "ValueError", "error_message": "too many values to unpack (expected 2)", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\nValueError: too many values to unpack (expected 2)\n"}
{"timestamp": "2025-08-17T10:32:53.302303", "query": "    def resolve_references(self, query):", "error_type": "ValueError", "error_message": "too many values to unpack (expected 2)", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\nValueError: too many values to unpack (expected 2)\n"}
2025-08-17 10:32:53,302 - ERROR - {"timestamp": "2025-08-17T10:32:53.302303", "query": "    def resolve_references(self, query):", "error_type": "ValueError", "error_message": "too many values to unpack (expected 2)", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\nValueError: too many values to unpack (expected 2)\n"}
{"timestamp": "2025-08-17T10:32:53.328721", "query": "        \"\"\"基础指代消解\"\"\"", "error_type": "ValueError", "error_message": "too many values to unpack (expected 2)", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\nValueError: too many values to unpack (expected 2)\n"}
2025-08-17 10:32:53,328 - ERROR - {"timestamp": "2025-08-17T10:32:53.328721", "query": "        \"\"\"基础指代消解\"\"\"", "error_type": "ValueError", "error_message": "too many values to unpack (expected 2)", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\nValueError: too many values to unpack (expected 2)\n"}
{"timestamp": "2025-08-17T10:32:53.356322", "query": "        if not self.history:", "error_type": "ValueError", "error_message": "too many values to unpack (expected 2)", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\nValueError: too many values to unpack (expected 2)\n"}
2025-08-17 10:32:53,356 - ERROR - {"timestamp": "2025-08-17T10:32:53.356322", "query": "        if not self.history:", "error_type": "ValueError", "error_message": "too many values to unpack (expected 2)", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\nValueError: too many values to unpack (expected 2)\n"}
{"timestamp": "2025-08-17T10:32:53.383952", "query": "            self.history.append({\"query\": query})", "error_type": "ValueError", "error_message": "too many values to unpack (expected 2)", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\nValueError: too many values to unpack (expected 2)\n"}
2025-08-17 10:32:53,384 - ERROR - {"timestamp": "2025-08-17T10:32:53.383952", "query": "            self.history.append({\"query\": query})", "error_type": "ValueError", "error_message": "too many values to unpack (expected 2)", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\nValueError: too many values to unpack (expected 2)\n"}
{"timestamp": "2025-08-17T10:32:53.412113", "query": "            return query", "error_type": "ValueError", "error_message": "too many values to unpack (expected 2)", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\nValueError: too many values to unpack (expected 2)\n"}
2025-08-17 10:32:53,412 - ERROR - {"timestamp": "2025-08-17T10:32:53.412113", "query": "            return query", "error_type": "ValueError", "error_message": "too many values to unpack (expected 2)", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\nValueError: too many values to unpack (expected 2)\n"}
{"timestamp": "2025-08-17T10:32:53.438282", "query": "        ", "error_type": "ValueError", "error_message": "too many values to unpack (expected 2)", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\nValueError: too many values to unpack (expected 2)\n"}
2025-08-17 10:32:53,438 - ERROR - {"timestamp": "2025-08-17T10:32:53.438282", "query": "        ", "error_type": "ValueError", "error_message": "too many values to unpack (expected 2)", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\nValueError: too many values to unpack (expected 2)\n"}
{"timestamp": "2025-08-17T10:32:53.467044", "query": "        # 处理简单指代（如\"它\"、\"这个\"）", "error_type": "ValueError", "error_message": "too many values to unpack (expected 2)", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\nValueError: too many values to unpack (expected 2)\n"}
2025-08-17 10:32:53,467 - ERROR - {"timestamp": "2025-08-17T10:32:53.467044", "query": "        # 处理简单指代（如\"它\"、\"这个\"）", "error_type": "ValueError", "error_message": "too many values to unpack (expected 2)", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\nValueError: too many values to unpack (expected 2)\n"}
{"timestamp": "2025-08-17T10:32:53.495320", "query": "        last_entities = self.get_last_entities()", "error_type": "ValueError", "error_message": "too many values to unpack (expected 2)", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\nValueError: too many values to unpack (expected 2)\n"}
2025-08-17 10:32:53,495 - ERROR - {"timestamp": "2025-08-17T10:32:53.495320", "query": "        last_entities = self.get_last_entities()", "error_type": "ValueError", "error_message": "too many values to unpack (expected 2)", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\nValueError: too many values to unpack (expected 2)\n"}
{"timestamp": "2025-08-17T10:32:53.523021", "query": "        ", "error_type": "ValueError", "error_message": "too many values to unpack (expected 2)", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\nValueError: too many values to unpack (expected 2)\n"}
2025-08-17 10:32:53,523 - ERROR - {"timestamp": "2025-08-17T10:32:53.523021", "query": "        ", "error_type": "ValueError", "error_message": "too many values to unpack (expected 2)", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\nValueError: too many values to unpack (expected 2)\n"}
{"timestamp": "2025-08-17T10:32:53.549581", "query": "        # 处理\"它\"、\"这个\"等指代", "error_type": "ValueError", "error_message": "too many values to unpack (expected 2)", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\nValueError: too many values to unpack (expected 2)\n"}
2025-08-17 10:32:53,549 - ERROR - {"timestamp": "2025-08-17T10:32:53.549581", "query": "        # 处理\"它\"、\"这个\"等指代", "error_type": "ValueError", "error_message": "too many values to unpack (expected 2)", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\nValueError: too many values to unpack (expected 2)\n"}
{"timestamp": "2025-08-17T10:32:53.576223", "query": "        if \"它\" in query or \"这个\" in query:", "error_type": "ValueError", "error_message": "too many values to unpack (expected 2)", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\nValueError: too many values to unpack (expected 2)\n"}
2025-08-17 10:32:53,576 - ERROR - {"timestamp": "2025-08-17T10:32:53.576223", "query": "        if \"它\" in query or \"这个\" in query:", "error_type": "ValueError", "error_message": "too many values to unpack (expected 2)", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\nValueError: too many values to unpack (expected 2)\n"}
{"timestamp": "2025-08-17T10:32:53.602156", "query": "            if last_entities:", "error_type": "ValueError", "error_message": "too many values to unpack (expected 2)", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\nValueError: too many values to unpack (expected 2)\n"}
2025-08-17 10:32:53,602 - ERROR - {"timestamp": "2025-08-17T10:32:53.602156", "query": "            if last_entities:", "error_type": "ValueError", "error_message": "too many values to unpack (expected 2)", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\nValueError: too many values to unpack (expected 2)\n"}
{"timestamp": "2025-08-17T10:32:53.631182", "query": "                return query.replace(\"它\", last_entities[0]).replace(\"这个\", last_entities[0])", "error_type": "ValueError", "error_message": "too many values to unpack (expected 2)", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\nValueError: too many values to unpack (expected 2)\n"}
2025-08-17 10:32:53,631 - ERROR - {"timestamp": "2025-08-17T10:32:53.631182", "query": "                return query.replace(\"它\", last_entities[0]).replace(\"这个\", last_entities[0])", "error_type": "ValueError", "error_message": "too many values to unpack (expected 2)", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\nValueError: too many values to unpack (expected 2)\n"}
{"timestamp": "2025-08-17T10:32:53.662156", "query": "        ", "error_type": "ValueError", "error_message": "too many values to unpack (expected 2)", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\nValueError: too many values to unpack (expected 2)\n"}
2025-08-17 10:32:53,662 - ERROR - {"timestamp": "2025-08-17T10:32:53.662156", "query": "        ", "error_type": "ValueError", "error_message": "too many values to unpack (expected 2)", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\nValueError: too many values to unpack (expected 2)\n"}
{"timestamp": "2025-08-17T10:32:53.688826", "query": "        # 处理\"呢?\"等省略问法", "error_type": "ValueError", "error_message": "too many values to unpack (expected 2)", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\nValueError: too many values to unpack (expected 2)\n"}
2025-08-17 10:32:53,688 - ERROR - {"timestamp": "2025-08-17T10:32:53.688826", "query": "        # 处理\"呢?\"等省略问法", "error_type": "ValueError", "error_message": "too many values to unpack (expected 2)", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\nValueError: too many values to unpack (expected 2)\n"}
{"timestamp": "2025-08-17T10:32:53.716102", "query": "        if \"呢\" in query and len(query.strip()) <= 2:", "error_type": "ValueError", "error_message": "too many values to unpack (expected 2)", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\nValueError: too many values to unpack (expected 2)\n"}
2025-08-17 10:32:53,716 - ERROR - {"timestamp": "2025-08-17T10:32:53.716102", "query": "        if \"呢\" in query and len(query.strip()) <= 2:", "error_type": "ValueError", "error_message": "too many values to unpack (expected 2)", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\nValueError: too many values to unpack (expected 2)\n"}
{"timestamp": "2025-08-17T10:32:53.742931", "query": "            if last_entities:", "error_type": "ValueError", "error_message": "too many values to unpack (expected 2)", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\nValueError: too many values to unpack (expected 2)\n"}
2025-08-17 10:32:53,743 - ERROR - {"timestamp": "2025-08-17T10:32:53.742931", "query": "            if last_entities:", "error_type": "ValueError", "error_message": "too many values to unpack (expected 2)", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\nValueError: too many values to unpack (expected 2)\n"}
{"timestamp": "2025-08-17T10:32:53.769509", "query": "                return f\"{last_entities[0]}的情况如何\"", "error_type": "ValueError", "error_message": "too many values to unpack (expected 2)", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\nValueError: too many values to unpack (expected 2)\n"}
2025-08-17 10:32:53,769 - ERROR - {"timestamp": "2025-08-17T10:32:53.769509", "query": "                return f\"{last_entities[0]}的情况如何\"", "error_type": "ValueError", "error_message": "too many values to unpack (expected 2)", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\nValueError: too many values to unpack (expected 2)\n"}
{"timestamp": "2025-08-17T10:32:53.795919", "query": "        ", "error_type": "ValueError", "error_message": "too many values to unpack (expected 2)", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\nValueError: too many values to unpack (expected 2)\n"}
2025-08-17 10:32:53,796 - ERROR - {"timestamp": "2025-08-17T10:32:53.795919", "query": "        ", "error_type": "ValueError", "error_message": "too many values to unpack (expected 2)", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\nValueError: too many values to unpack (expected 2)\n"}
{"timestamp": "2025-08-17T10:32:53.822548", "query": "        self.history.append({\"query\": query})", "error_type": "ValueError", "error_message": "too many values to unpack (expected 2)", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\nValueError: too many values to unpack (expected 2)\n"}
2025-08-17 10:32:53,822 - ERROR - {"timestamp": "2025-08-17T10:32:53.822548", "query": "        self.history.append({\"query\": query})", "error_type": "ValueError", "error_message": "too many values to unpack (expected 2)", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\nValueError: too many values to unpack (expected 2)\n"}
{"timestamp": "2025-08-17T10:32:53.849642", "query": "        return query", "error_type": "ValueError", "error_message": "too many values to unpack (expected 2)", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\nValueError: too many values to unpack (expected 2)\n"}
2025-08-17 10:32:53,849 - ERROR - {"timestamp": "2025-08-17T10:32:53.849642", "query": "        return query", "error_type": "ValueError", "error_message": "too many values to unpack (expected 2)", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\nValueError: too many values to unpack (expected 2)\n"}
{"timestamp": "2025-08-17T10:32:53.876405", "query": "    ", "error_type": "ValueError", "error_message": "too many values to unpack (expected 2)", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\nValueError: too many values to unpack (expected 2)\n"}
2025-08-17 10:32:53,876 - ERROR - {"timestamp": "2025-08-17T10:32:53.876405", "query": "    ", "error_type": "ValueError", "error_message": "too many values to unpack (expected 2)", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\nValueError: too many values to unpack (expected 2)\n"}
{"timestamp": "2025-08-17T10:32:53.903392", "query": "    def get_last_entities(self):", "error_type": "ValueError", "error_message": "too many values to unpack (expected 2)", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\nValueError: too many values to unpack (expected 2)\n"}
2025-08-17 10:32:53,903 - ERROR - {"timestamp": "2025-08-17T10:32:53.903392", "query": "    def get_last_entities(self):", "error_type": "ValueError", "error_message": "too many values to unpack (expected 2)", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\nValueError: too many values to unpack (expected 2)\n"}
{"timestamp": "2025-08-17T10:32:53.930306", "query": "        \"\"\"获取上一轮对话的实体\"\"\"", "error_type": "ValueError", "error_message": "too many values to unpack (expected 2)", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\nValueError: too many values to unpack (expected 2)\n"}
2025-08-17 10:32:53,930 - ERROR - {"timestamp": "2025-08-17T10:32:53.930306", "query": "        \"\"\"获取上一轮对话的实体\"\"\"", "error_type": "ValueError", "error_message": "too many values to unpack (expected 2)", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\nValueError: too many values to unpack (expected 2)\n"}
{"timestamp": "2025-08-17T10:32:53.958073", "query": "        if not self.history:", "error_type": "ValueError", "error_message": "too many values to unpack (expected 2)", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\nValueError: too many values to unpack (expected 2)\n"}
2025-08-17 10:32:53,958 - ERROR - {"timestamp": "2025-08-17T10:32:53.958073", "query": "        if not self.history:", "error_type": "ValueError", "error_message": "too many values to unpack (expected 2)", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\nValueError: too many values to unpack (expected 2)\n"}
{"timestamp": "2025-08-17T10:32:53.986575", "query": "            return []", "error_type": "ValueError", "error_message": "too many values to unpack (expected 2)", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\nValueError: too many values to unpack (expected 2)\n"}
2025-08-17 10:32:53,986 - ERROR - {"timestamp": "2025-08-17T10:32:53.986575", "query": "            return []", "error_type": "ValueError", "error_message": "too many values to unpack (expected 2)", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\nValueError: too many values to unpack (expected 2)\n"}
{"timestamp": "2025-08-17T10:32:54.016775", "query": "        ", "error_type": "ValueError", "error_message": "too many values to unpack (expected 2)", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\nValueError: too many values to unpack (expected 2)\n"}
2025-08-17 10:32:54,016 - ERROR - {"timestamp": "2025-08-17T10:32:54.016775", "query": "        ", "error_type": "ValueError", "error_message": "too many values to unpack (expected 2)", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\nValueError: too many values to unpack (expected 2)\n"}
{"timestamp": "2025-08-17T10:32:54.043282", "query": "        # 简单实现：返回上轮查询中的名词", "error_type": "ValueError", "error_message": "too many values to unpack (expected 2)", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\nValueError: too many values to unpack (expected 2)\n"}
2025-08-17 10:32:54,043 - ERROR - {"timestamp": "2025-08-17T10:32:54.043282", "query": "        # 简单实现：返回上轮查询中的名词", "error_type": "ValueError", "error_message": "too many values to unpack (expected 2)", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\nValueError: too many values to unpack (expected 2)\n"}
{"timestamp": "2025-08-17T10:32:54.070869", "query": "        last_query = self.history[-1][\"query\"]", "error_type": "ValueError", "error_message": "too many values to unpack (expected 2)", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\nValueError: too many values to unpack (expected 2)\n"}
2025-08-17 10:32:54,070 - ERROR - {"timestamp": "2025-08-17T10:32:54.070869", "query": "        last_query = self.history[-1][\"query\"]", "error_type": "ValueError", "error_message": "too many values to unpack (expected 2)", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\nValueError: too many values to unpack (expected 2)\n"}
{"timestamp": "2025-08-17T10:32:54.100017", "query": "        words = pseg.cut(last_query)", "error_type": "ValueError", "error_message": "too many values to unpack (expected 2)", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\nValueError: too many values to unpack (expected 2)\n"}
2025-08-17 10:32:54,100 - ERROR - {"timestamp": "2025-08-17T10:32:54.100017", "query": "        words = pseg.cut(last_query)", "error_type": "ValueError", "error_message": "too many values to unpack (expected 2)", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\nValueError: too many values to unpack (expected 2)\n"}
{"timestamp": "2025-08-17T10:33:12.645918", "query": "        return [word for word, flag in words if flag.startswith('n') and word not in Config.STOP_WORDS]America's Continents", "error_type": "ValueError", "error_message": "too many values to unpack (expected 2)", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\nValueError: too many values to unpack (expected 2)\n"}
2025-08-17 10:33:12,646 - ERROR - {"timestamp": "2025-08-17T10:33:12.645918", "query": "        return [word for word, flag in words if flag.startswith('n') and word not in Config.STOP_WORDS]America's Continents", "error_type": "ValueError", "error_message": "too many values to unpack (expected 2)", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 35, in process\n    answer, confidence = self.engine.generate_answer(resolved_query, relevant_docs)\nValueError: too many values to unpack (expected 2)\n"}
{"timestamp": "2025-08-17T12:07:45.231237", "query": "The United States has several states", "error_type": "OutOfMemoryError", "error_message": "CUDA out of memory. Tried to allocate 2.00 MiB. GPU ", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 30, in process\n    relevant_docs = self.engine.retrieve(search_query, crag_data)\n  File \"/home/wufuwei/rag/universal_rag_engine.py\", line 120, in retrieve\n    doc_embeddings = self.embedding_model.encode(all_snippets)\n  File \"/home/wufuwei/miniconda3/envs/huawei_rag/lib/python3.10/site-packages/sentence_transformers/SentenceTransformer.py\", line 371, in encode\n    out_features = self.forward(features)\n  File \"/home/wufuwei/miniconda3/envs/huawei_rag/lib/python3.10/site-packages/torch/nn/modules/container.py\", line 217, in forward\n    input = module(input)\n  File \"/home/wufuwei/miniconda3/envs/huawei_rag/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1532, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/home/wufuwei/miniconda3/envs/huawei_rag/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1541, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/home/wufuwei/miniconda3/envs/huawei_rag/lib/python3.10/site-packages/sentence_transformers/models/Transformer.py\", line 98, in forward\n    output_states = self.auto_model(**trans_features, return_dict=False)\n  File \"/home/wufuwei/miniconda3/envs/huawei_rag/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1532, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/home/wufuwei/miniconda3/envs/huawei_rag/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1541, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/home/wufuwei/miniconda3/envs/huawei_rag/lib/python3.10/site-packages/transformers/models/bert/modeling_bert.py\", line 1137, in forward\n    encoder_outputs = self.encoder(\n  File \"/home/wufuwei/miniconda3/envs/huawei_rag/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1532, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/home/wufuwei/miniconda3/envs/huawei_rag/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1541, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/home/wufuwei/miniconda3/envs/huawei_rag/lib/python3.10/site-packages/transformers/models/bert/modeling_bert.py\", line 690, in forward\n    layer_outputs = layer_module(\n  File \"/home/wufuwei/miniconda3/envs/huawei_rag/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1532, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/home/wufuwei/miniconda3/envs/huawei_rag/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1541, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/home/wufuwei/miniconda3/envs/huawei_rag/lib/python3.10/site-packages/transformers/models/bert/modeling_bert.py\", line 580, in forward\n    self_attention_outputs = self.attention(\n  File \"/home/wufuwei/miniconda3/envs/huawei_rag/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1532, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/home/wufuwei/miniconda3/envs/huawei_rag/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1541, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/home/wufuwei/miniconda3/envs/huawei_rag/lib/python3.10/site-packages/transformers/models/bert/modeling_bert.py\", line 510, in forward\n    self_outputs = self.self(\n  File \"/home/wufuwei/miniconda3/envs/huawei_rag/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1532, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/home/wufuwei/miniconda3/envs/huawei_rag/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1541, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/home/wufuwei/miniconda3/envs/huawei_rag/lib/python3.10/site-packages/transformers/models/bert/modeling_bert.py\", line 407, in forward\n    key_layer = self.transpose_for_scores(self.key(current_states))\n  File \"/home/wufuwei/miniconda3/envs/huawei_rag/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1532, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/home/wufuwei/miniconda3/envs/huawei_rag/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1541, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/home/wufuwei/miniconda3/envs/huawei_rag/lib/python3.10/site-packages/torch/nn/modules/linear.py\", line 116, in forward\n    return F.linear(input, self.weight, self.bias)\ntorch.cuda.OutOfMemoryError: CUDA out of memory. Tried to allocate 2.00 MiB. GPU \n"}
{"timestamp": "2025-08-17T14:57:17.410032", "query": "上周的账单是300元", "session_id": null, "error_type": "TypeError", "error_message": "string indices must be integers", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 75, in process\n    session_id = session[\"id\"]\nTypeError: string indices must be integers\n"}
{"timestamp": "2025-08-17T14:57:27.961093", "query": "中国有多少人", "session_id": null, "error_type": "TypeError", "error_message": "string indices must be integers", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 75, in process\n    session_id = session[\"id\"]\nTypeError: string indices must be integers\n"}
{"timestamp": "2025-08-17T14:58:03.436113", "query": "美少个洲", "session_id": null, "error_type": "TypeError", "error_message": "string indices must be integers", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 75, in process\n    session_id = session[\"id\"]\nTypeError: string indices must be integers\n"}
{"timestamp": "2025-08-17T17:45:07.011243", "query": "中国有多少人口", "session_id": "37aa2b1c-b19a-4b93-ad14-dd64563ccada", "error_type": "RuntimeError", "error_message": "mat1 and mat2 must have the same dtype, but got Half and Float", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/hybrid_pipeline.py\", line 64, in process\n    model_result = self.uniraq_model.predict(user_query, history_queries)\n  File \"/home/wufuwei/rag/uniraq_mini.py\", line 137, in predict\n    outputs = self._forward(\n  File \"/home/wufuwei/rag/uniraq_mini.py\", line 175, in _forward\n    intent_logits = self.intent_head(sequence_output[:, 0, :])\n  File \"/home/wufuwei/miniconda3/envs/huawei_rag/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1532, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/home/wufuwei/miniconda3/envs/huawei_rag/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1541, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/home/wufuwei/miniconda3/envs/huawei_rag/lib/python3.10/site-packages/torch/nn/modules/container.py\", line 217, in forward\n    input = module(input)\n  File \"/home/wufuwei/miniconda3/envs/huawei_rag/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1532, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/home/wufuwei/miniconda3/envs/huawei_rag/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1541, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/home/wufuwei/miniconda3/envs/huawei_rag/lib/python3.10/site-packages/torch/nn/modules/linear.py\", line 116, in forward\n    return F.linear(input, self.weight, self.bias)\nRuntimeError: mat1 and mat2 must have the same dtype, but got Half and Float\n"}
2025-08-17 17:45:07,012 - ERROR - {"timestamp": "2025-08-17T17:45:07.011243", "query": "中国有多少人口", "session_id": "37aa2b1c-b19a-4b93-ad14-dd64563ccada", "error_type": "RuntimeError", "error_message": "mat1 and mat2 must have the same dtype, but got Half and Float", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/hybrid_pipeline.py\", line 64, in process\n    model_result = self.uniraq_model.predict(user_query, history_queries)\n  File \"/home/wufuwei/rag/uniraq_mini.py\", line 137, in predict\n    outputs = self._forward(\n  File \"/home/wufuwei/rag/uniraq_mini.py\", line 175, in _forward\n    intent_logits = self.intent_head(sequence_output[:, 0, :])\n  File \"/home/wufuwei/miniconda3/envs/huawei_rag/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1532, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/home/wufuwei/miniconda3/envs/huawei_rag/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1541, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/home/wufuwei/miniconda3/envs/huawei_rag/lib/python3.10/site-packages/torch/nn/modules/container.py\", line 217, in forward\n    input = module(input)\n  File \"/home/wufuwei/miniconda3/envs/huawei_rag/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1532, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/home/wufuwei/miniconda3/envs/huawei_rag/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1541, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/home/wufuwei/miniconda3/envs/huawei_rag/lib/python3.10/site-packages/torch/nn/modules/linear.py\", line 116, in forward\n    return F.linear(input, self.weight, self.bias)\nRuntimeError: mat1 and mat2 must have the same dtype, but got Half and Float\n"}
{"timestamp": "2025-08-17T17:45:19.677736", "query": "美国有多少洲", "session_id": "37aa2b1c-b19a-4b93-ad14-dd64563ccada", "error_type": "RuntimeError", "error_message": "mat1 and mat2 must have the same dtype, but got Half and Float", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/hybrid_pipeline.py\", line 64, in process\n    model_result = self.uniraq_model.predict(user_query, history_queries)\n  File \"/home/wufuwei/rag/uniraq_mini.py\", line 137, in predict\n    outputs = self._forward(\n  File \"/home/wufuwei/rag/uniraq_mini.py\", line 175, in _forward\n    intent_logits = self.intent_head(sequence_output[:, 0, :])\n  File \"/home/wufuwei/miniconda3/envs/huawei_rag/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1532, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/home/wufuwei/miniconda3/envs/huawei_rag/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1541, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/home/wufuwei/miniconda3/envs/huawei_rag/lib/python3.10/site-packages/torch/nn/modules/container.py\", line 217, in forward\n    input = module(input)\n  File \"/home/wufuwei/miniconda3/envs/huawei_rag/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1532, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/home/wufuwei/miniconda3/envs/huawei_rag/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1541, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/home/wufuwei/miniconda3/envs/huawei_rag/lib/python3.10/site-packages/torch/nn/modules/linear.py\", line 116, in forward\n    return F.linear(input, self.weight, self.bias)\nRuntimeError: mat1 and mat2 must have the same dtype, but got Half and Float\n"}
2025-08-17 17:45:19,686 - ERROR - {"timestamp": "2025-08-17T17:45:19.677736", "query": "美国有多少洲", "session_id": "37aa2b1c-b19a-4b93-ad14-dd64563ccada", "error_type": "RuntimeError", "error_message": "mat1 and mat2 must have the same dtype, but got Half and Float", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/hybrid_pipeline.py\", line 64, in process\n    model_result = self.uniraq_model.predict(user_query, history_queries)\n  File \"/home/wufuwei/rag/uniraq_mini.py\", line 137, in predict\n    outputs = self._forward(\n  File \"/home/wufuwei/rag/uniraq_mini.py\", line 175, in _forward\n    intent_logits = self.intent_head(sequence_output[:, 0, :])\n  File \"/home/wufuwei/miniconda3/envs/huawei_rag/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1532, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/home/wufuwei/miniconda3/envs/huawei_rag/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1541, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/home/wufuwei/miniconda3/envs/huawei_rag/lib/python3.10/site-packages/torch/nn/modules/container.py\", line 217, in forward\n    input = module(input)\n  File \"/home/wufuwei/miniconda3/envs/huawei_rag/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1532, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/home/wufuwei/miniconda3/envs/huawei_rag/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1541, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/home/wufuwei/miniconda3/envs/huawei_rag/lib/python3.10/site-packages/torch/nn/modules/linear.py\", line 116, in forward\n    return F.linear(input, self.weight, self.bias)\nRuntimeError: mat1 and mat2 must have the same dtype, but got Half and Float\n"}
{"timestamp": "2025-08-17T17:56:13.414718", "query": "中国有多少人1", "session_id": "78aaef58-c0dd-4814-9176-9b422dd17ede", "error_type": "RuntimeError", "error_message": "mat1 and mat2 must have the same dtype, but got Half and Float", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/hybrid_pipeline.py\", line 64, in process\n    model_result = self.uniraq_model.predict(user_query, history_queries)\n  File \"/home/wufuwei/rag/uniraq_mini.py\", line 137, in predict\n    outputs = self._forward(\n  File \"/home/wufuwei/rag/uniraq_mini.py\", line 175, in _forward\n    intent_logits = self.intent_head(sequence_output[:, 0, :])\n  File \"/home/wufuwei/miniconda3/envs/huawei_rag/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1532, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/home/wufuwei/miniconda3/envs/huawei_rag/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1541, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/home/wufuwei/miniconda3/envs/huawei_rag/lib/python3.10/site-packages/torch/nn/modules/container.py\", line 217, in forward\n    input = module(input)\n  File \"/home/wufuwei/miniconda3/envs/huawei_rag/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1532, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/home/wufuwei/miniconda3/envs/huawei_rag/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1541, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/home/wufuwei/miniconda3/envs/huawei_rag/lib/python3.10/site-packages/torch/nn/modules/linear.py\", line 116, in forward\n    return F.linear(input, self.weight, self.bias)\nRuntimeError: mat1 and mat2 must have the same dtype, but got Half and Float\n"}
2025-08-17 17:56:13,416 - ERROR - {"timestamp": "2025-08-17T17:56:13.414718", "query": "中国有多少人1", "session_id": "78aaef58-c0dd-4814-9176-9b422dd17ede", "error_type": "RuntimeError", "error_message": "mat1 and mat2 must have the same dtype, but got Half and Float", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/hybrid_pipeline.py\", line 64, in process\n    model_result = self.uniraq_model.predict(user_query, history_queries)\n  File \"/home/wufuwei/rag/uniraq_mini.py\", line 137, in predict\n    outputs = self._forward(\n  File \"/home/wufuwei/rag/uniraq_mini.py\", line 175, in _forward\n    intent_logits = self.intent_head(sequence_output[:, 0, :])\n  File \"/home/wufuwei/miniconda3/envs/huawei_rag/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1532, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/home/wufuwei/miniconda3/envs/huawei_rag/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1541, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/home/wufuwei/miniconda3/envs/huawei_rag/lib/python3.10/site-packages/torch/nn/modules/container.py\", line 217, in forward\n    input = module(input)\n  File \"/home/wufuwei/miniconda3/envs/huawei_rag/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1532, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/home/wufuwei/miniconda3/envs/huawei_rag/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1541, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/home/wufuwei/miniconda3/envs/huawei_rag/lib/python3.10/site-packages/torch/nn/modules/linear.py\", line 116, in forward\n    return F.linear(input, self.weight, self.bias)\nRuntimeError: mat1 and mat2 must have the same dtype, but got Half and Float\n"}
{"timestamp": "2025-08-18T16:53:59.844029", "query": "中国有多少人", "error_type": "AttributeError", "error_message": "'UniversalParser' object has no attribute 'extract_keywords'", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 28, in process\n    parsed = self.parser.parse(resolved_query)\n  File \"/home/wufuwei/rag/universal_parser.py\", line 17, in parse\n    \"keywords\": self.extract_keywords(query),\nAttributeError: 'UniversalParser' object has no attribute 'extract_keywords'\n"}
{"timestamp": "2025-08-18T16:54:15.673182", "query": "美国有多少个州", "error_type": "AttributeError", "error_message": "'UniversalParser' object has no attribute 'extract_keywords'", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 28, in process\n    parsed = self.parser.parse(resolved_query)\n  File \"/home/wufuwei/rag/universal_parser.py\", line 17, in parse\n    \"keywords\": self.extract_keywords(query),\nAttributeError: 'UniversalParser' object has no attribute 'extract_keywords'\n"}
{"timestamp": "2025-08-18T17:14:49.990024", "query": "中国多少人口", "error_type": "NameError", "error_message": "name 'pseg' is not defined", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 28, in process\n    parsed = self.parser.parse(resolved_query)\n  File \"/home/wufuwei/rag/universal_parser.py\", line 18, in parse\n    \"entities\": self.extract_entities(query),  # 新增实体提取\n  File \"/home/wufuwei/rag/universal_parser.py\", line 24, in extract_entities\n    words = pseg.cut(query)\nNameError: name 'pseg' is not defined\n"}
{"timestamp": "2025-08-18T17:21:14.565943", "query": "人口数量不对，是13亿", "error_type": "KeyError", "error_message": "'query'", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 30, in process\n    resolved_query = self.dialogue_tracker.resolve_references(user_query)\n  File \"/home/wufuwei/rag/universal_dialogue_tracker.py\", line 22, in resolve_references\n    resolved_query = self._resolve_pronouns(query)\n  File \"/home/wufuwei/rag/universal_dialogue_tracker.py\", line 38, in _resolve_pronouns\n    last_entities = self.get_last_entities()\n  File \"/home/wufuwei/rag/universal_dialogue_tracker.py\", line 116, in get_last_entities\n    return self.get_entities_from_query(self.history[-1][\"query\"])\nKeyError: 'query'\n"}
{"timestamp": "2025-08-18T17:22:09.461180", "query": "记住，上周账单是300元", "error_type": "KeyError", "error_message": "'query'", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 30, in process\n    resolved_query = self.dialogue_tracker.resolve_references(user_query)\n  File \"/home/wufuwei/rag/universal_dialogue_tracker.py\", line 22, in resolve_references\n    resolved_query = self._resolve_pronouns(query)\n  File \"/home/wufuwei/rag/universal_dialogue_tracker.py\", line 38, in _resolve_pronouns\n    last_entities = self.get_last_entities()\n  File \"/home/wufuwei/rag/universal_dialogue_tracker.py\", line 116, in get_last_entities\n    return self.get_entities_from_query(self.history[-1][\"query\"])\nKeyError: 'query'\n"}
{"timestamp": "2025-08-18T17:22:22.706366", "query": "国人口", "error_type": "KeyError", "error_message": "'query'", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 30, in process\n    resolved_query = self.dialogue_tracker.resolve_references(user_query)\n  File \"/home/wufuwei/rag/universal_dialogue_tracker.py\", line 22, in resolve_references\n    resolved_query = self._resolve_pronouns(query)\n  File \"/home/wufuwei/rag/universal_dialogue_tracker.py\", line 38, in _resolve_pronouns\n    last_entities = self.get_last_entities()\n  File \"/home/wufuwei/rag/universal_dialogue_tracker.py\", line 116, in get_last_entities\n    return self.get_entities_from_query(self.history[-1][\"query\"])\nKeyError: 'query'\n"}
{"timestamp": "2025-08-18T17:24:23.203868", "query": "美国多少人口", "error_type": "KeyError", "error_message": "'query'", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 30, in process\n    resolved_query = self.dialogue_tracker.resolve_references(user_query)\n  File \"/home/wufuwei/rag/universal_dialogue_tracker.py\", line 22, in resolve_references\n    resolved_query = self._resolve_pronouns(query)\n  File \"/home/wufuwei/rag/universal_dialogue_tracker.py\", line 38, in _resolve_pronouns\n    last_entities = self.get_last_entities()\n  File \"/home/wufuwei/rag/universal_dialogue_tracker.py\", line 116, in get_last_entities\n    return self.get_entities_from_query(self.history[-1][\"query\"])\nKeyError: 'query'\n"}
{"timestamp": "2025-08-18T17:24:56.835180", "query": "中国人口", "error_type": "KeyError", "error_message": "'query'", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 30, in process\n    resolved_query = self.dialogue_tracker.resolve_references(user_query)\n  File \"/home/wufuwei/rag/universal_dialogue_tracker.py\", line 22, in resolve_references\n    resolved_query = self._resolve_pronouns(query)\n  File \"/home/wufuwei/rag/universal_dialogue_tracker.py\", line 38, in _resolve_pronouns\n    last_entities = self.get_last_entities()\n  File \"/home/wufuwei/rag/universal_dialogue_tracker.py\", line 116, in get_last_entities\n    return self.get_entities_from_query(self.history[-1][\"query\"])\nKeyError: 'query'\n"}
{"timestamp": "2025-08-18T17:26:13.601827", "query": "1", "error_type": "KeyError", "error_message": "'query'", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 30, in process\n    resolved_query = self.dialogue_tracker.resolve_references(user_query)\n  File \"/home/wufuwei/rag/universal_dialogue_tracker.py\", line 22, in resolve_references\n    resolved_query = self._resolve_pronouns(query)\n  File \"/home/wufuwei/rag/universal_dialogue_tracker.py\", line 38, in _resolve_pronouns\n    last_entities = self.get_last_entities()\n  File \"/home/wufuwei/rag/universal_dialogue_tracker.py\", line 116, in get_last_entities\n    return self.get_entities_from_query(self.history[-1][\"query\"])\nKeyError: 'query'\n"}
{"timestamp": "2025-08-19T10:27:59.786400", "query": "美国有多少人", "error_type": "AttributeError", "error_message": "'UniversalDialogueTracker' object has no attribute '_generate_summary'", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 30, in process\n    resolved_query = self.dialogue_tracker.resolve_references(user_query)\n  File \"/home/wufuwei/rag/universal_dialogue_tracker.py\", line 29, in resolve_references\n    self._update_context_summary(query)\n  File \"/home/wufuwei/rag/universal_dialogue_tracker.py\", line 75, in _update_context_summary\n    self.context_summary = self._generate_summary(prompt)\nAttributeError: 'UniversalDialogueTracker' object has no attribute '_generate_summary'\n"}
{"timestamp": "2025-08-21T16:44:01.336235", "query": "杜甫是什么人", "error_type": "TypeError", "error_message": "argument 'ids': 'Encoding' object cannot be converted to 'Sequence'", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 30, in process\n    resolved_query = self.dialogue_tracker.resolve_references(user_query)\n  File \"/home/wufuwei/rag/universal_dialogue_tracker.py\", line 71, in resolve_references\n    resolved = self.coref_llm.complete(history_text, query)\n  File \"/home/wufuwei/miniconda3/envs/huawei_rag/lib/python3.10/site-packages/torch/utils/_contextlib.py\", line 120, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/wufuwei/rag/qwen_coref.py\", line 63, in complete\n    answer = full[len(self.tokenizer.decode(inputs[0], skip_special_tokens=True)):]\n  File \"/home/wufuwei/miniconda3/envs/huawei_rag/lib/python3.10/site-packages/transformers/tokenization_utils_base.py\", line 3811, in decode\n    return self._decode(\n  File \"/home/wufuwei/miniconda3/envs/huawei_rag/lib/python3.10/site-packages/transformers/tokenization_utils_fast.py\", line 625, in _decode\n    text = self._tokenizer.decode(token_ids, skip_special_tokens=skip_special_tokens)\nTypeError: argument 'ids': 'Encoding' object cannot be converted to 'Sequence'\n"}
{"timestamp": "2025-08-21T17:34:39.443301", "query": "他和乔丹相比如何", "error_type": "AttributeError", "error_message": "'UniversalDialogueTracker' object has no attribute '_get_entities_with_types'", "stack_trace": "Traceback (most recent call last):\n  File \"/home/wufuwei/rag/base_pipeline.py\", line 30, in process\n    resolved_query = self.dialogue_tracker.resolve_references(user_query)\n  File \"/home/wufuwei/rag/universal_dialogue_tracker.py\", line 80, in resolve_references\n    resolved_query = self._resolve_pronouns_with_attention(query)\n  File \"/home/wufuwei/rag/universal_dialogue_tracker.py\", line 103, in _resolve_pronouns_with_attention\n    antecedent = self._find_antecedent_with_attention(pronoun_info, word, words, i)\n  File \"/home/wufuwei/rag/universal_dialogue_tracker.py\", line 123, in _find_antecedent_with_attention\n    all_entities = self._get_all_entities_with_context()\n  File \"/home/wufuwei/rag/universal_dialogue_tracker.py\", line 230, in _get_all_entities_with_context\n    entities_with_types = self._get_entities_with_types(query)\nAttributeError: 'UniversalDialogueTracker' object has no attribute '_get_entities_with_types'\n"}
